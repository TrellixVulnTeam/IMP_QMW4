# output directory and log
U_OUT, U_LOG = prepare_environment('Util')

rule _DOWNLOAD_LIBRARY_FILES:
    output:
        "lib/d3.min.js",
        "lib/d3pie.min.js",
        "lib/jquery-2.1.1.min.js",
        "lib/jquery.cookie.min.js",
        "lib/bootstrap.min.css",
        "lib/bootstrap.min.js",
    shell:
        """
        wget https://raw.githubusercontent.com/mbostock/d3/master/d3.min.js -O lib/d3.min.js
        wget https://raw.githubusercontent.com/benkeen/d3pie/0.1.3/d3pie/d3pie.min.js -O lib/d3pie.min.js
        wget http://code.jquery.com/jquery-2.1.1.min.js -O lib/jquery-2.1.1.min.js
        wget https://raw.githubusercontent.com/js-cookie/js-cookie/v2.0.3/src/js.cookie.js -O lib/jquery.cookie.min.js
        wget https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css -O lib/bootstrap.min.css
        wget https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js -O lib/bootstrap.min.js
        """

rule DIAGRAMMS:
    message:
        "Creating diagramms."
    output:
        expand(["{dir}/workflow.png", "{dir}/workflow.pdf"], dir=OUTPUTDIR)
    params:
        outdir = "%s" % OUTPUTDIR
    shell:
        """
        snakemake ALL --forceall --dag | dot -Tpng > {params.outdir}/workflow.png
        snakemake ALL --forceall --dag | dot -Tpdf > {params.outdir}/workflow.pdf
        """

rule REPORT:
    input:
        [
            "lib/imp.html",
            "lib/d3.min.js",
            "lib/jquery-2.1.1.min.js",
            "lib/jquery.cookie.js",
            "lib/bootstrap.min.css",
            "lib/bootstrap.min.js",
            "lib/imp.js",

        ] +
        expand(["{dir}/workflow.png", "{dir}/workflow.pdf"], dir=OUTPUTDIR)
    output:
        "%s/REPORT.html" % OUTPUTDIR
    params:
        outdir = "%s" % OUTPUTDIR
    message:
        'Create report'
    run:
        with open('%s/data.js' % OUTPUTDIR, 'w') as whandle:
            towrite = json.dumps(config)
            whandle.write("IMP_CONFIG = %s;" % towrite)
        shell("cp {input[0]} {params.outdir}/REPORT.html")
        shell("cp {input[1:]} {params.outdir}")


rule REPORT2:
        input:
            ["lib/imp.html", "lib/d3.min.js", "lib/jquery-2.1.1.min.js", "lib/imp.js"]
        params:
            outdir = "%s" % OUTPUTDIR
        message:
            'Create report'
        run:
          with open('%s/data.js' % OUTPUTDIR, 'w') as whandle:
                  towrite = json.dumps(config)
                  whandle.write("IMP_CONFIG = %s;" % towrite)
                  if os.path.exists('stats.json'):
                          with open('stats.json', 'r') as rhandle:
                                  towrite = json.load(rhandle)
                                  whandle.write("\nIMP_STATS = %s;" % towrite)
          shell("cp {input[0]} {params.outdir}/IMP.html")
          shell("cp {input[1]} {params.outdir}")
          shell("cp {input[2]} {params.outdir}")
          shell("cp {input[3]} {params.outdir}")
          if os.path.exists('imp.log'):
            shell("mv imp.log {params.outdir}")


rule INDEX_FASTA_FILE:
    log:
        U_LOG
    benchmark:
        "%s/benchmarks/INDEX_FASTA_FILE.json" % U_OUT
    input:
        "{fasta}"
    output:
        "{fasta}.amb",
        "{fasta}.bwt",
        "{fasta}.pac",
        "{fasta}.sa",
        "{fasta}.ann"
    shell:
        """
        bwa index {wildcards.fasta} > {log} 2>&1
        """

rule CHECK_TOOL_VERSION:
    log:
        U_LOG
    benchmark:
        "%s/benchmarks/CHECK_TOOL_VERSION.json" % U_OUT
    output:
        "%s/tools.versions" % U_OUT
    shell:
        """
        echo "# ht2-stat" > {output}
        ht2-stat --version >> {output}
        echo "# ht2-stat-draw.pl" >> {output}
        which ht2-stat-draw.pl | md5sum | awk '{{print $1}}' >> {output}
        echo "# Trimmomatic" >> {output}
        echo "{config[Preprocessing][trimmomatic][jarfile]}" | grep -Eo '[0-9]+.[0-9]+' >> {output}
        echo "# Sortmerna" >> {output} 2>&1
        sortmerna --version >> {output} 2>&1
        echo "# megahit" >> {output}
        megahit --help > megahit_version 2>&1
        cat megahit_version | head -1 >> {output}
        echo "# bwa" >> {output}
        bwa > bwa_version 2>&1
        cat bwa_version | grep -i "version" >> {output}
        echo "# samtools" >> {output}
        samtools > samtools_version 2>&1
        cat samtools_version | grep "Version" >> {output}
        echo "# bamToFastq" >> {output}
        bamToFastq > bamToFastq_version 2>&1
        cat bamToFastq_version | grep -i "version" >> {output}
        echo "# idba_ud" >> {output}
        echo "# fq2fa" >> {output}
        echo "# cap3"  >> {output}
        echo "# coverageBed"  >> {output}
        echo "# bh_tsne" >> {output}
        echo "# KronaTools" >> {output}

        """
