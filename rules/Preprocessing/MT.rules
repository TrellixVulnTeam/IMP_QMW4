rule PREPROCESSING_MT_GET_FILES:
    message:
        "Preparing MT DATA files : %s." % ', '.join(MT)
    input:
        MT
    output:
        expand('{dir}/{raw}', raw=['MT.R1.fq', 'MT.R2.fq'], dir=P_OUT)
    run:
        prepare_input_files(input, 'MT')

rule PREPROCESSING_MT_QUALITY_STATS:
    log:
        P_LOG
    benchmark:
        "%s/benchmarks/PREPROCESSING_MT_QUALITY_STATS.json" % P_OUT
    input:
        expand('{dir}/{raw}', raw=['MT.R1.fq', 'MT.R2.fq'], dir=P_OUT)
    output:
        expand(['{dir}/cycle_composition_{n}.{ext}',
                '{dir}/cycle_quality_{n}.{ext}',
                '{dir}/cycle_quality_box_{n}.{ext}',
                '{dir}/info.tab', '{dir}/lane_tile_quality_{n}.{ext}',
                '{dir}/quality_QQ.{ext}',
                '{dir}/reads_length.{ext}',
                '{dir}/reads_quality.{ext}'
                ], n=['1', '2'], ext=['gnuplot', 'png', 'tab'], dir='%s/stats/MT' % P_OUT)
    shell:
        """
        ht2-stat --encode=sanger -q -P -t {THREADS} -o  {P_OUT}/stats/MT -i {input} >> {log} 2>&1
        ht2-stat-draw.pl --dir {P_OUT}/stats/MT >> {log} 2>&1
        """

rule PREPROCESSING_MT_TRIM:
    log:
        P_LOG
    input:
        expand('{dir}/{uniq}', uniq=['MT.R1.fq', 'MT.R2.fq'], dir=P_OUT),
        DBPATH + "/adapters/adapters.done"
    output:
        expand('{dir}/{trim}', trim=[
            'MT.R1.trimmed.fq',
            'MT.SE1.trimmed.fq',
            'MT.R2.trimmed.fq',
            'MT.SE2.trimmed.fq'], dir=P_OUT)
    shell:
        """
        java -jar {config[trimmomatic][jarfile]} PE -threads {THREADS} {input[0]} {input[1]} {output} ILLUMINACLIP:{DBPATH}/adapters/{config[trimmomatic][adapter]}-PE.fa:{config[trimmomatic][seed_mismatch]}:{config[trimmomatic][palindrome_clip_threshold]}:{config[trimmomatic][simple_clip_threshold]} LEADING:{config[trimmomatic][leading]} TRAILING:{config[trimmomatic][trailing]} SLIDINGWINDOW:{config[trimmomatic][window_size]}:{config[trimmomatic][window_quality]} MINLEN:{config[trimmomatic][minlen]} MAXINFO:{config[trimmomatic][target_length]}:{config[trimmomatic][strictness]} >> {log} 2>&1
        """
    benchmark:
        "%s/benchmarks/PREPROCESSING_MT_TRIM.json" % P_OUT


rule PREPROCESSING_MT_CAT_TRIMMED_SE:
    log:
        P_LOG
    benchmark:
        "%s/benchmarks/PREPROCESSING_MT_CAT_TRIMMED_SE.json" % P_OUT
    input:
        expand('{dir}/{trim}', trim=[
            'MT.SE1.trimmed.fq',
            'MT.SE2.trimmed.fq',
            ], dir=P_OUT)
    output:
        expand('{dir}/{cat}', cat='MT.SE.trimmed.fq', dir=P_OUT)
    shell:
        "cat {input[0]} {input[1]} > {output}"


rule PREPROCESSING_MT_PREPROCESSED_QUALITY_STATS:
    log:
        P_LOG
    benchmark:
        "%s/benchmarks/PREPROCESSING_MT_PREPROCESSED_QUALITY_STATS.json" % P_OUT
    input:
        expand('{dir}/{trim}', trim=[
            'MT.R1.trimmed.fq',
            'MT.R2.trimmed.fq',
            ], dir=P_OUT)
    output:
        expand(['{dir}/cycle_composition_{n}.{ext}',
                '{dir}/cycle_quality_{n}.{ext}',
                '{dir}/cycle_quality_box_{n}.{ext}',
                '{dir}/info.tab', '{dir}/lane_tile_quality_{n}.{ext}',
                '{dir}/quality_QQ.{ext}',
                '{dir}/reads_length.{ext}',
                '{dir}/reads_quality.{ext}'
                ], n=['1', '2'], ext=['gnuplot', 'png', 'tab'], dir='%s/stats_after_preprocessing/MT' % P_OUT)
    shell:
        """
        ht2-stat --encode=sanger -q -P -t {THREADS} -o  {P_OUT}/stats_after_preprocessing/MT -i {input} >> {log} 2>&1
        ht2-stat-draw.pl --dir {P_OUT}/stats_after_preprocessing/MT >> {log} 2>&1
        """


rule PREPROCESSING_MT_FILTER_RRNA:
    log:
        P_LOG
    benchmark:
        "%s/benchmarks/PREPROCESSING_MT_FILTER_RRNA.json" % P_OUT
    input:
        expand('{dir}/{trim}', trim=[
            'MT.R1.trimmed.fq',
            'MT.R2.trimmed.fq',
            'MT.SE.trimmed.fq'
            ], dir=P_OUT),
        expand(
            "{path}/idx/{files}.{ext}",
            files=config["sortmerna"]["files"],
            path=DBPATH + "/sortmerna",
            ext=['bursttrie_0.dat', 'kmer_0.dat', 'pos_0.dat', 'stats'])
    output:
        expand('{dir}/{filter}', filter=[
            'MT.R1.trimmed.rna_filtered.fq',
            'MT.R2.trimmed.rna_filtered.fq',
            'MT.SE.trimmed.rna_filtered.fq',
            'MT.R1.trimmed.rna.fq',
            'MT.R2.trimmed.rna.fq',
            'MT.SE.trimmed.rna.fq',
            ], dir=P_OUT)
    run:
        fastafiles = expand("{path}/{files}.fasta", files=config["sortmerna"]["files"], path=DBPATH + "/sortmerna")
        fastaindexed = expand("{path}/idx/{files}", files=config["sortmerna"]["files"], path=DBPATH + "/sortmerna")
        ref = ':'.join('%s,%s' % (a, b) for a, b in zip(fastafiles, fastaindexed))
        # shell("{EXE} {SCRIPTS[filter_rna]} -t {config[sortmerna][threads]} \
        # -d %s -p {config[sortmerna][scripts_path]} \
        # {input[0]} {input[1]} {input[2]} {output[0]} {output[1]} {output[2]}" % ref)
        shell("""
        TMP_R12=$(mktemp --tmpdir={TMPDIR} -t "tmp_XXXXXX.R12")
        {config[sortmerna][scripts_path]}/merge-paired-reads.sh {input[0]} {input[1]} $TMP_R12.fq
        sortmerna --ref {ref} --reads $TMP_R12.fq --fastx --aligned $TMP_R12.rrna --other $TMP_R12.rrna_filt -a {THREADS} --paired_in
        {config[sortmerna][scripts_path]}/unmerge-paired-reads.sh $TMP_R12.rrna.fq {output[3]} {output[4]}
        {config[sortmerna][scripts_path]}/unmerge-paired-reads.sh $TMP_R12.rrna_filt.fq {output[0]} {output[1]}
        sortmerna --ref {ref} --reads {input[2]} --fastx --aligned {P_OUT}/MT.SE.trimmed.rna --other {P_OUT}/MT.SE.trimmed.rna_filtered -a {THREADS}
        rm $TMP_R12*
        """)

rule PREPROCESSING_MT_FILTER_HG:
    log:
        P_LOG
    benchmark:
        "%s/benchmarks/PREPROCESSING_MT_FILTER_HG.json" % P_OUT
    input:
        expand('{dir}/{filter}', filter=[
            'MT.R1.trimmed.rna_filtered.fq',
            'MT.R2.trimmed.rna_filtered.fq',
            'MT.SE.trimmed.rna_filtered.fq'], dir=P_OUT),
        '{dir}/{ref}.fa'.format(dir=DBPATH + "/human", ref=config['human_filtering']['filter']),
        expand(
            "{path}/{filter}.{ext}",
            path=DBPATH + "/human",
            filter=config["human_filtering"]["filter"],
            ext=['fa', 'fa.amb', 'fa.ann', 'fa.bwt', 'fa.pac', 'fa.sa'])
    output:
        expand('{dir}/{filter}', filter=expand([
            'MT.R1.trimmed.rna_filtered.{f}.fq',
            'MT.R2.trimmed.rna_filtered.{f}.fq',
            'MT.SE.trimmed.rna_filtered.{f}.fq'], f=config['human_filtering']['filter']), dir=P_OUT)

    shell:
        """
        TMP_FILE=$(mktemp --tmpdir={TMPDIR} -t "alignment_XXXXXX.bam")
        BUFFER=$(mktemp --tmpdir={TMPDIR} -t "alignment_XXXXXX.bam")
        bwa mem -v 1 -t {THREADS} {input[3]} {input[0]} {input[1]} | samtools view -@ {THREADS} -bS - > $TMP_FILE
        samtools merge -@ {THREADS} -u - \
        <(samtools view -@ {THREADS} -u  -f 4 -F 264 $TMP_FILE) \
        <(samtools view -@ {THREADS} -u -f 8 -F 260 $TMP_FILE) \
        <(samtools view -@ {THREADS} -u -f 12 -F 256 $TMP_FILE) | \
        samtools view -@ {THREADS} -bF 0x800 -  | samtools sort -o -@ {THREADS} -m {MEMCORE}G -n - $BUFFER | bamToFastq -i stdin -fq {output[0]} -fq2 {output[1]}
        bwa mem -v 1 -t {THREADS} {input[3]} {input[2]} | samtools view -@ {THREADS} -bS - | samtools view -@ {THREADS} -uf 4 - | bamToFastq -i stdin -fq {output[2]}
        rm -rf $BUFFER* $TMP_FILE
        """
