rule PREPROCESSING_MG_GET_FILES:
    message:
        "Preparing MG DATA files : %s." % ', '.join(MG)
    input:
        MG
    output:
        expand('{dir}/{raw}', raw=['MG.R1.fq', 'MG.R2.fq'], dir=P_OUT)
    benchmark:
        "%s/benchmarks/PREPROCESSING_MG_GET_FILES.json" % P_OUT
    run:
        prepare_input_files(input, 'MG')


rule PREPROCESSING_MG_TRIM:
    log:
        P_LOG
    input:
        expand('{dir}/{uniq}', uniq=['MG.R1.fq', 'MG.R2.fq'], dir=P_OUT),
        DBPATH + "/adapters/adapters.done"
    output:
        expand('{dir}/{trim}', trim=[
            'MG.R1.trimmed.fq',
            'MG.SE1.trimmed.fq',
            'MG.R2.trimmed.fq',
            'MG.SE2.trimmed.fq'], dir=P_OUT)
    shell:
        """
        java -jar {config[trimmomatic][jarfile]} PE -threads {THREADS} {input[0]} {input[1]} {output} \
        ILLUMINACLIP:{DBPATH}/adapters/{config[trimmomatic][adapter]}-PE.fa:{config[trimmomatic][seed_mismatch]}:{config[trimmomatic][palindrome_clip_threshold]}:{config[trimmomatic][simple_clip_threshold]} \
        LEADING:{config[trimmomatic][leading]} \
        TRAILING:{config[trimmomatic][trailing]} \
        SLIDINGWINDOW:{config[trimmomatic][window_size]}:{config[trimmomatic][window_quality]} \
        MINLEN:{config[trimmomatic][minlen]} \
        MAXINFO:{config[trimmomatic][target_length]}:{config[trimmomatic][strictness]} >> {log} 2>&1
        """
    benchmark:
        "%s/benchmarks/PREPROCESSING_MG_TRIM.json" % P_OUT


rule PREPROCESSING_MG_CAT_TRIMMED_SE:
    log:
        P_LOG
    input:
        expand('{dir}/{trim}', trim=[
            'MG.SE1.trimmed.fq',
            'MG.SE2.trimmed.fq'], dir=P_OUT)
    benchmark:
        "%s/benchmarks/PREPROCESSING_MG_CAT_TRIMMED_SE.json" % P_OUT
    output:
        expand('{dir}/{cat}', cat='MG.SE.trimmed.fq', dir=P_OUT)
    shell:
        "cat {input[0]} {input[1]} > {output}"
