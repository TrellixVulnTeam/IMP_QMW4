rule PREPROCESSING_MG_GET_FILES:
    message:
        "Preparing MG DATA files : %s." % ', '.join(MG)
    input:
        MG
    output:
        expand('{dir}/{raw}', raw=['MG.R1.fq', 'MG.R2.fq'], dir=P_OUT)
    benchmark:
        "%s/benchmarks/PREPROCESSING_MG_GET_FILES.json" % P_OUT
    run:
        prepare_input_files(input, 'MG')


rule PREPROCESSING_MG_DEDUPLICATE:
    log:
        P_LOG
    input:
        expand('{dir}/{raw}', raw=['MG.R1.fq', 'MG.R2.fq'], dir=P_OUT)
    output:
        expand('{dir}/{uniq}', uniq=['MG.R1.uniq.fq', 'MG.R2.uniq.fq'], dir=P_OUT)
    benchmark:
        "%s/benchmarks/PREPROCESSING_MG_DEDUPLICATE.json" % P_OUT
    shell:
        """
        fastuniq -i <(echo -e "{input[0]}\\n{input[1]}") -o {output[0]} -p {output[1]} >> {log} 2>&1
        """

rule PREPROCESSING_MG_TRIM:
    log:
        P_LOG
    input:
        expand('{dir}/{uniq}', uniq=['MG.R1.fq', 'MG.R2.fq'], dir=P_OUT),
        DBPATH + "/adapters/adapters.done"
    output:
        expand('{dir}/{trim}', trim=[
            'MG.R1.uniq.trimmed.fq',
            'MG.SE1.uniq.trimmed.fq',
            'MG.R2.uniq.trimmed.fq',
            'MG.SE2.uniq.trimmed.fq'], dir=P_OUT)
    shell:
        """
        java -jar {config[trimmomatic][jarfile]} PE -threads {THREADS} {input[0]} {input[1]} {output} ILLUMINACLIP:{DBPATH}/adapters/{config[trimmomatic][adapter]}-PE.fa:{config[trimmomatic][seed_mismatch]}:{config[trimmomatic][palindrome_clip_threshold]}:{config[trimmomatic][simple_clip_threshold]} LEADING:{config[trimmomatic][leading]} TRAILING:{config[trimmomatic][trailing]} SLIDINGWINDOW:{config[trimmomatic][window_size]}:{config[trimmomatic][window_quality]} MINLEN:{config[trimmomatic][minlen]} MAXINFO:{config[trimmomatic][target_length]}:{config[trimmomatic][strictness]} >> {log} 2>&1
        """
    benchmark:
        "%s/benchmarks/PREPROCESSING_MG_TRIM.json" % P_OUT


rule PREPROCESSING_MG_CAT_TRIMMED_SE:
    log:
        P_LOG
    input:
        expand('{dir}/{trim}', trim=[
            'MG.SE1.uniq.trimmed.fq',
            'MG.SE2.uniq.trimmed.fq'], dir=P_OUT)
    output:
        expand('{dir}/{cat}', cat='MG.SE.uniq.trimmed.fq', dir=P_OUT)
    shell:
        "cat {input[0]} {input[1]} > {output}"
    benchmark:
        "%s/benchmarks/PREPROCESSING_MG_CAT_TRIMMED_SE.json" % P_OUT

rule PREPROCESSING_MG_FILTER_HG:
    log:
        P_LOG
    input:
        expand('{dir}/{trim}', trim=[
            'MG.R1.uniq.trimmed.fq',
            'MG.R2.uniq.trimmed.fq',
            'MG.SE.uniq.trimmed.fq'], dir=P_OUT),
        '{dir}/{ref}.fa'.format(dir=DBPATH + "/human", ref=config['human_filtering']['filter']),
        expand(
            "{p}/human/{filter}.{ext}", filter=config["human_filtering"]["filter"],
            ext=['fa', 'fa.amb', 'fa.ann', 'fa.bwt', 'fa.pac', 'fa.sa'], p=DBPATH)
    output:
        expand('{dir}/{filter}', filter=expand([
            'MG.R1.uniq.trimmed.{f}.fq',
            'MG.R2.uniq.trimmed.{f}.fq',
            'MG.SE.uniq.trimmed.{f}.fq'], f=config['human_filtering']['filter']), dir=P_OUT)
    benchmark:
        "%s/benchmarks/PREPROCESSING_MG_FILTER_HG.json" % P_OUT
    shell:
        """
        TMP_FILE=$(mktemp --tmpdir={TMPDIR} -t "alignment_XXXXXX.bam")
        BUFFER=$(mktemp --tmpdir={TMPDIR} -t "alignment_XXXXXX.bam")
        bwa mem -v 1 -t {THREADS} {input[3]} {input[0]} {input[1]} | samtools view -@ {THREADS} -bS - > $TMP_FILE
        samtools merge -@ {THREADS} -u - \
        <(samtools view -@ {THREADS} -u  -f 4 -F 264 $TMP_FILE) \
        <(samtools view -@ {THREADS} -u -f 8 -F 260 $TMP_FILE) \
        <(samtools view -@ {THREADS} -u -f 12 -F 256 $TMP_FILE) | \
        samtools view -@ {THREADS} -bF 0x800 -  | samtools sort -o -@ {THREADS} -m {MEMCORE}G -n - $BUFFER | \
        bamToFastq -i stdin -fq {output[0]} -fq2 {output[1]}
        bwa mem -v 1 -t {THREADS} {input[3]} {input[2]} | samtools view -@ {THREADS} -bS - | \
        samtools view -@ {THREADS} -uf 4 - | bamToFastq -i stdin -fq {output[2]}
        rm -rf $BUFFER* $TMP_FILE
        """
