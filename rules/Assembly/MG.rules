#################
## MG ONLY ASSEMBLY WITH IDBA
#################

rule ASSEMBLY_MG_ASSEMBLY_SE_CAT:
    log:
        A_LOG
    benchmark:
        "%s/benchmarks/ASSEMBLY_MG_ASSEMBLY_SE_CAT.json" % A_OUT
    input:
        '{dir}/MT.assembly.cat.fa'.format(dir=A_OUT),
        preprocessed_mg('SE')
    output:
        '{dir}/MG.MT_assembly-MG_SE.fa'.format(dir=A_OUT),
    shell:
        ""
        "cat {input[0]} <(cat {input[1]} | sed -n '1~4s/^@/>/p;2~4p') > {output}"


rule ASSEMBLY_MG_ASSEMBLY_1:
    log:
        A_LOG
    benchmark:
        "%s/benchmarks/ASSEMBLY_MG_ASSEMBLY_1.json" % A_OUT
    input:
        preprocessed_mg('R1'),
        preprocessed_mg('R2'),
        preprocessed_mg('SE'),
    output:
        '{dir}/MG.assembly_1.fa'.format(dir=A_OUT),
    shell:
        """
        TMPD=$(mktemp -d -t --tmpdir={TMPDIR} "XXXXXX")
        fq2fa --merge {input[0]} {input[1]} $TMPD/merged.fa
        fq2fa {input[2]} $TMPD/se.fa
        echo $TMPDIR
        idba_ud -r $TMPD/merged.fa \
        -l $TMPD/se.fa -o $TMPD \
        --mink {config[Assembly][idba_ud][mink]} --maxk {config[Assembly][idba_ud][maxk]} \
        --step {config[Assembly][idba_ud][step]} --num_threads {THREADS} \
        --similar {config[Assembly][idba_ud][perid]} --pre_correction
        mv $TMPD/contig.fa {output}
        """
        #rm -rf $TMPD

rule ASSEMBLY_MG_EXTRACT_UNMAPPED_FROM_ASSEMBLY_1:
    log:
        A_LOG
    benchmark:
        "%s/benchmarks/ASSEMBLY_MG_EXTRACT_UNMAPPED_FROM_ASSEMBLY_1.json" % A_OUT
    input:
        preprocessed_mg('R1'),
        preprocessed_mg('R2'),
        preprocessed_mg('SE'),
        '{dir}/MG.assembly_1.fa'.format(dir=A_OUT),
        expand('{dir}/MG.assembly_1.fa.{ext}', dir=A_OUT, ext=['amb', 'bwt', 'pac', 'sa', 'ann'])
    output:
        expand('{dir}/{name}', name=[
            'MG.assembly_1.R1.fq',
            'MG.assembly_1.R2.fq',
            'MG.assembly_1.SE.fq'], dir=A_OUT)
    shell:
        """
        TMP_FILE=$(mktemp --tmpdir={TMPDIR} -t "alignment_XXXXXX.bam")
        BUFFER=$(mktemp --tmpdir={TMPDIR} -t "alignment_XXXXXX.bam")
        bwa mem -v 1 -t {THREADS} {input[3]} {input[0]} {input[1]} | samtools view -@ {THREADS} -bS - > $TMP_FILE
        samtools merge -@ {THREADS} -u - \
        <(samtools view -@ {THREADS} -u  -f 4 -F 264 $TMP_FILE) \
        <(samtools view -@ {THREADS} -u -f 8 -F 260 $TMP_FILE) \
        <(samtools view -@ {THREADS} -u -f 12 -F 256 $TMP_FILE) | \
        samtools view -@ {THREADS} -bF 0x800 -  | samtools sort -o -@ {THREADS} -m {MEMCORE}G -n - BUFFER | \
        bamToFastq -i stdin -fq {output[0]} -fq2 {output[1]}
        bwa mem -v 1 -t {THREADS} {input[3]} {input[2]} | samtools view -@ {THREADS} -bS - | \
        samtools view -@ {THREADS} -uf 4 - | bamToFastq -i stdin -fq {output[2]}
        rm -rf $BUFFER* $TMP_FILE
        """

rule ASSEMBLY_MG_ASSEMBLY_2:
    log:
        A_LOG
    benchmark:
        "%s/benchmarks/ASSEMBLY_MG_ASSEMBLY_2.json" % A_OUT
    input:
        expand('{dir}/{name}', name=[
            'MG.assembly_1.R1.fq',
            'MG.assembly_1.R2.fq',
            'MG.assembly_1.SE.fq'], dir=A_OUT)
    output:
        '{dir}/MG.assembly_2.fa'.format(dir=A_OUT),
    shell:
        """
        TMPD=$(mktemp -d -t --tmpdir={TMPDIR} "XXXXXX")
        fq2fa --merge {input[0]} {input[1]} $TMPD/merged.fa
        idba_ud -r $TMPD/merged.fa \
        -l {input[2]} -o $TMPD \
        --mink {config[Assembly][idba_ud][mink]} --maxk {config[Assembly][idba_ud][maxk]} \
        --step {config[Assembly][idba_ud][step]} --num_threads {THREADS} \
        --similar {config[Assembly][idba_ud][perid]} --pre_correction
        mv $TMPD/contig.fa {output}
        rm -rf $TMPD
        """

rule ASSEMBLY_MG_MERGE_ASSEMBLY:
    log:
        A_LOG
    benchmark:
        "%s/benchmarks/ASSEMBLY_MG_MERGE_ASSEMBLY.json" % A_OUT
    input:
        '{dir}/MG.assembly_1.fa'.format(dir=A_OUT),
        '{dir}/MG.assembly_2.fa'.format(dir=A_OUT)
    output:
        '{dir}/MG.assembly.merged.fa'.format(dir=A_OUT),
    shell:
        """
        NAME={A_OUT}/MG.assembly
        cat {input} > $NAME.cat.fa
        cap3 $NAME.cat.fa
        # Concatenate assembled contigs, singletons and rename the contigs
        cat $NAME.cat.fa.cap.contigs $NAME.cat.fa.cap.singlets | \
        awk '/^>/{{print \">contig_\" ++i; next}}{{print}}' > $NAME.merged.fa
        """

################
# ## MGMT FAST ASSEMBLY USING MEGAHIT
################

rule ASSEMBLY_MG_FAST_1:
    log:
        A_LOG
    benchmark:
        "%s/benchmarks/ASSEMBLY_MT_ASSEMBLY_1.json" % A_OUT
    input:
        preprocessed_mg('R1'),
        preprocessed_mg('R2'),
        preprocessed_mg('SE'),
        '{dir}/MT.assembly_1/final.contigs.fa'.format(dir=A_OUT)
    output:
        '{dir}/MGMT.assembly_1/final.contigs.fa'.format(dir=A_OUT)
    params:
        outdir = "{dir}/MGMT.assembly_1".format(dir=A_OUT)
    shell:
        """
        MAX_READ_LEN=$(cat {input} | sed -n '1~4s/^@/>/p;2~4p' |\
        awk '$0 ~ \">\" {{c=0\"\t\"; }} $0 !~ \">\" {{c+=length($0); max=(max>c)?max:c;}} END {{print max}}')
        echo "Max read length: $MAX_READ_LEN"
        MEMBYTES=$(({MEMTOTAL}*1000*1000*1000))
        echo "Available memory in bytes: $MEMBYTES"
        megahit -o {params.outdir} --cpu-only -m $MEMBYTES --mem-flag 1\
        -l $MAX_READ_LEN --input-cmd "cat {input}" -t {THREADS} --continue > {log} 2>&1
        """

rule ASSEMBLY_MGMT_EXTRACT_UNMAPPED_FROM_FAST_1:
    log:
        A_LOG
    benchmark:
        "%s/benchmarks/ASSEMBLY_MT_EXTRACT_UNMAPPED_FROM_ASSEMBLY_1.json" % A_OUT
    input:
        preprocessed_mg('R1'),
        preprocessed_mg('R2'),
        preprocessed_mg('SE'),
        '{dir}/MGMT.assembly_1/final.contigs.fa'.format(dir=A_OUT),
        expand('{dir}/MGMT.assembly_1/final.contigs.fa.{ext}', dir=A_OUT, ext=['amb', 'bwt', 'pac', 'sa', 'ann'])
    output:
        expand('{dir}/{name}', name=[
            'MG.R1.unmapped.fq',
            'MG.R2.unmapped.fq',
            'MG.SE.unmapped.fq'], dir=A_OUT)
    shell:
        """
        TMP_FILE=$(mktemp --tmpdir={TMPDIR} -t "alignment_XXXXXX.bam")
        BUFFER=$(mktemp --tmpdir={TMPDIR} -t "alignment_buffer_XXXXXX.bam")
        bwa mem -v 1 -t {THREADS} {input[3]} {input[0]} {input[1]} | samtools view -@ {THREADS} -bS - > $TMP_FILE
        samtools merge -@ {THREADS} -u - \
        <(samtools view -@ {THREADS} -u  -f 4 -F 264 $TMP_FILE) \
        <(samtools view -@ {THREADS} -u -f 8 -F 260 $TMP_FILE) \
        <(samtools view -@ {THREADS} -u -f 12 -F 256 $TMP_FILE) | \
        samtools view -@ {THREADS} -bF 0x800 -  | samtools sort -o -@ {THREADS} -m {MEMCORE}G -n - $BUFFER | \
        bamToFastq -i stdin -fq {output[0]} -fq2 {output[1]}
        bwa mem -v 1 -t {THREADS} {input[3]} {input[2]} | \
        samtools view -@ {THREADS} -bS - | samtools view -@ {THREADS} -uf 4 - | \
        bamToFastq -i stdin -fq {output[2]}
        rm -rf $BUFFER* $TMP_FILE
        """

rule ASSEMBLY_MGMT_FAST_2:
    log:
        A_LOG
    benchmark:
        "%s/benchmarks/ASSEMBLY_MT_ASSEMBLY_2.json" % A_OUT
    input:
        expand('{dir}/{name}', name=[
            'MG.R1.unmapped.fq',
            'MG.R2.unmapped.fq',
            'MG.SE.unmapped.fq'], dir=A_OUT)
    output:
        '{dir}/MGMT.assembly_2/final.contigs.fa'.format(dir=A_OUT)
    params:
        outdir = "{dir}/MGMT.assembly_2".format(dir=A_OUT)
    shell:
        """
        MAX_READ_LEN=$(cat {input} | sed -n '1~4s/^@/>/p;2~4p' | \
        awk '$0 ~ \">\" {{c=0\"\t\"; }} $0 !~ \">\" {{c+=length($0); max=(max>c)?max:c;}} END {{print max}}')
        MEMBYTES=$(({MEMTOTAL}*1000*1000*1000))
        megahit -o {params.outdir} --cpu-only -m $MEMBYTES --mem-flag 1 -l $MAX_READ_LEN \
        --input-cmd "cat {input}" -t {THREADS} --continue > {log} 2>&1
        """

