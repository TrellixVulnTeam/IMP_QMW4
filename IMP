#!/usr/bin/env python3
from lib.docopt import docopt
from lib.path import Path
import subprocess
import os
import getpass
import json
import shlex
from copy import deepcopy
import tempfile
import sys
import re

IMP_VERSION = '1.3'
IMP_DEFAULT_TAR_REPOSITORY = 'https://webdav-r3lab.uni.lu/public/R3lab/IMP/dist/imp-%s.tar.gz' % IMP_VERSION
IMP_IMAGE_NAME = 'docker-r3lab.uni.lu/imp/imp'

__doc__ = """Integrated Metaomic Pipeline.
 ____  __  __  ____
(_  _)(  \/  )(  _ \\
 _)(_  )    (  )___/
(____)(_/\/\_)(__)

Usage:
  IMP [-m MG1 -m MG2 -m MGSE]
      [-t MT1 -t MT2 -t MTSE]
      -o OUTPUT
      [--enter] [--norm] [--current] [-r REPO] [-i IMAGENAME] [-v VERSION] [-c CONFIGFILE] [-d DBPATH] [-a ASSEMBLER] [-e ENV] ... [COMMANDS ...]
  IMP --init [--current] [--enter] [-d DBPATH] [-i IMAGENAME] [-v VERSION] [-r REPO] [-c CONFIGFILE]
  IMP (-h | --help)
  IMP --version

Options:
  -e ENV            Environment variable to pass to the container
  --enter           Enter the container
  --init            Initialize IMP databases (Take a while).
  --norm            Don't delete the container after use. Useful for debugging.
  --ask             Ask to create directory if it doesn't exist.
  --current         Use the current version of the IMP codebase (what you have pulled).
  -c CONFIG         Pass a user defined config file. [default: conf/userconfig.imp.json]
  -h --help         Show this help and exit
  -m MG             Path to the metagenomics paired files (must be 2 files).
  -t MT             Path to the metatranscriptomic paired files (2 files).
  -d DBPATH         Path to the databases [default: db]
  -i IMAGENAME      Name of the docker image. Useful when you want to run your own built container. [default: {name}]
  -v VERSION        Version of the docker image. Useful when you want to run your own built container. [default: {version}]
  -o OUTPUT         Path to the output directory
  -r REPO           Repository to install IMP Tarball from (it can be a local file). [default: {repo}]
  -a ASSEMBLER      Name of the assembler for MGMT. Only idba and megahit are supported.

Typical use:
    # first run
    ./IMP --init

    # simple run with default options
    ./IMP -m input/mg.r1.fq -m input/mg.r2.fq -t input/mt.r1.fq -t input/mt.r2.fq -o output_directory

    # use a different database path
    ./IMP --init -d /path/to_databases_directory
    ./IMP -m input/mg.r1.fq -m input/mg.r2.fq -t input/mt.r1.fq -t input/mt.r2.fq -o output_directory -d /path/to_databases_directory

    # use the IMP code you have pulled instead of the one shipped inside the container.
    ./IMP -m input/mg.r1.fq -m input/mg.r2.fq -t input/mt.r1.fq -t input/mt.r2.fq -o output_directory --current

Advanced use:
    # List commands available for snakemake
    ./IMP -m input/mg.r1.fq -m input/mg.r2.fq -t input/mt.r1.fq -t input/mt.r2.fq -o output_directory snakemake -l

    # Execute a specific step for snakemake
    ./IMP -m input/mg.r1.fq -m input/mg.r2.fq -t input/mt.r1.fq -t input/mt.r2.fq -o output_directory snakemake <STEP>

    # Enter the container
    ./IMP -m input/mg.r1.fq -m input/mg.r2.fq -t input/mt.r1.fq -t input/mt.r2.fq -o output_directory --enter

""".format(
    name=IMP_IMAGE_NAME,
    version=IMP_VERSION,
    repo=IMP_DEFAULT_TAR_REPOSITORY
)

_IMP_OUTPUT_DIR = '/home/imp/output'
_IMP_DB_DIR = '/home/imp/databases'
_IMP_DATA_DIR = '/home/imp/data'
_IMP_CONF_DIR = '/home/imp/conf'
_IMP_CODE_DIR = '/home/imp/code'


def check_installation():
    """
    Check if dependencies are installed.
    """
    # docker
    try:
        subprocess.check_output(['which', 'docker'])
    except subprocess.CalledProcessError:
        raise Exception("Docker must be installed. Please see https://docs.docker.com/installation.")
    # git
    try:
        subprocess.check_output(['which', 'git'])
    except subprocess.CalledProcessError:
        raise Exception("Git must be installed. Please see http://www.git-scm.com.")
    # python3
    if sys.version_info < (3, 0, 0):
        raise Exception("Python 3 or later must be installed. Please see https://www.python.org/downloads.")


def check_imp_installed(name, version, repo):
    """
    Check if IMP is installed. Install it if not.
    """
    if not is_imp_installed(name, version):
        install_imp(repo)


def is_imp_installed(name, version):
    """
    Check if IMP is installed
    """
    try:
        imp_image = subprocess.Popen(['docker', 'images', name], stdout=subprocess.PIPE)
        is_installed = subprocess.check_output(['grep', version], stdin=imp_image.stdout)
    except subprocess.CalledProcessError:
        return False
    return True


def install_imp(repo):
    """
    Install IMP.
    """
    fname = 'imp-tarball.tmp.tgz'
    if repo[:4].startswith('http'):
        # download
        print("[x] Downloading IMP TARBALL at '%s'" % repo)
        subprocess.check_output(['wget', '--no-check-certificate', '-c', repo, '-O', fname])
    else:
        # copy
        print("[x] Copying IMP TARBALL '%s'" % repo)
        subprocess.check_output(['cp', repo, fname])
    # load
    print("[x] Loading IMP TARBALL into docker")
    subprocess.check_output(['docker', 'load', '-i', fname])
    print("[x] Removing IMP TARBALL.")
    # clean
    os.remove(fname)


def map_user(command, directory):
    """
    User inside the docker container and outside the container are not the same.
    We change it on each run.
    """
    # get group id and username of the user
    username = getpass.getuser()
    return ' /bin/bash -c "{c} ; useradd {u} && chown -R {u} {d} && chmod -R u+Xrw,g+rw,o+r {d}"'.format(
        c=command, u=username, d=directory
    )


def _container_name_slug(directory):
    """
    Slugify container name base on the directory given
    """
    slug = re.sub('\W', '_', directory)
    while slug.startswith('_'):
        slug = slug[1:]
    return slug


def init(args):
    """
    Start the docker container to index files and setup prokka.
    Must be run at least once.
    """
    CURRENT_PATH = Path(__file__).parent.abspath()
    database_path = Path(args['-d']).abspath()
    config_file = str(Path(args['-c']).name)
    config_directory = Path(args['-c']).parent.abspath()
    # prepare docker command
    docker_cmd = 'docker run --rm -e "LOCAL_USER_ID=`id -u $USER`" -e "LOCAL_GROUP_ID=`id -g $USER`" --name {name} -v {d}:{cont_db} -v {conf}:{cont_conf} -e CONFIGFILE={cont_conf}/{c}{interactive} {n}:{v}'
    out_container_name = _container_name_slug(database_path)
    formatting_args = {
        'd': database_path,
        'cont_db': _IMP_DB_DIR,
        'n': args['-i'],
        'v': args['-v'],
        'c': config_file,
        'cont_conf': _IMP_CONF_DIR,
        'conf': config_directory,
        'name': out_container_name,
        'interactive': ''
    }

    # override docker command if the user want to mount a specific version of IMP codebase.
    if args['--current']:
        formatting_args['p'] = CURRENT_PATH
        formatting_args['cont_code'] =  _IMP_CODE_DIR
        docker_cmd = 'docker run --rm -e "LOCAL_USER_ID=`id -u $USER`" -e "LOCAL_GROUP_ID=`id -g $USER`" --name {name} -v {p}:{cont_code} -v {d}:{cont_db} -v {conf}:{cont_conf} -e CONFIGFILE={cont_conf}/{c}{interactive} {n}:{v}'
    if args['--enter']:
        formatting_args['interactive'] = ' -it'
    # format docker command
    docker_cmd = docker_cmd.format(**formatting_args)
    # IMP command + user mapping (see https://github.com/docker/docker/pull/12648)

    if args['--enter']:
        cmd = docker_cmd + ' /bin/bash'
    else:
        cmd = docker_cmd + ' snakemake -s {cont_code}/rules/ini/init'.format(cont_code=_IMP_CODE_DIR)

    _call(cmd, out_container_name)
    #subprocess.call(cmd, shell=True)


def run(args):
    CURRENT_PATH = Path(__file__).parent.abspath()

    # find minimum common path
    mg_data = [Path(p).abspath() for p in args['-m']]
    mt_data = [Path(p).abspath() for p in args['-t']]
    # check if paths exists
    for pth in mg_data + mt_data:
        if not pth.exists():
            print("'%s' does not exist" % pth)
            exit(1)
    common_path = Path(os.path.commonprefix(mg_data + mt_data)).dirname()

    # update data paths
    mg_data = [p.partition(common_path)[-1][1:] for p in mg_data]
    mt_data = [p.partition(common_path)[-1][1:] for p in mt_data]

    # output directory
    output = Path(args['-o']).abspath()

    if not output.exists():
        output.makedirs()

    # other path to mount
    database_path = Path(args['-d']).abspath()
    config_file = str(Path(args['-c']).name)
    config_directory = Path(args['-c']).parent.abspath()

    # configure IMP mount point to the docker container
    mount_points = [
        '-v %s:%s' % (common_path, _IMP_DATA_DIR),
        '-v %s:%s' % (output, _IMP_OUTPUT_DIR),
        '-v %s:%s' % (database_path, _IMP_DB_DIR),
        '-v %s:%s' % (config_directory, _IMP_CONF_DIR)
    ]
    # add code mount point if the user want to mount a specific version of IMP codebase.
    if args['--current']:
        mount_points.append('-v {cur}:{cont_code}'.format(cur=CURRENT_PATH, cont_code=_IMP_CODE_DIR))

    # add environment variables
    envs = ['-e {}="{}"'.format(*e.split('=')) for e in args['-e']]
    # prepare MG and MT data
    mg = ['%s/' % _IMP_DATA_DIR + d for d in mg_data]
    mt = ['%s/' % _IMP_DATA_DIR + d for d in mt_data]

    # add mg and/or mt data
    if mg:
        envs += ['-e MG="%s"' % ' '.join(mg)]
    if mt:
        envs += ['-e MT="%s"' % ' '.join(mt)]

    # add config file
    if args['-c']:
        envs += ['-e CONFIGFILE={cont_conf}/{conf}'.format(conf=config_file, cont_conf=_IMP_CONF_DIR)]

    # set imp assembler
    if args['-a']:
        envs += ['-e IMP_ASSEMBLER=%s' % args['-a']]

    # CL
    cmd = ['docker', 'run'] + mount_points + envs

    # rm the container by default
    if not args['--norm']:
        cmd += ['--rm']

    # if --enter flag is specified, attach tty and set mode to interactive
    if args['--enter']:
        cmd += ['-it']

    # map user
    cmd += ['-e "LOCAL_USER_ID=`id -u $USER`"', '-e "LOCAL_GROUP_ID=`id -g $USER`"']

    # output container name
    out_container_name = _container_name_slug(output)
    # add container name
    cmd += ['--name %s' % out_container_name]
    # add container name and commands to pass to snakemake
    cmd += ['%s:%s' % (args['-i'], args['-v'])]

    # map the workflow snakemake file
    workflow_file = '{cont_code}/Snakefile'.format(cont_code=_IMP_CODE_DIR)
    # if mg and not mt:
    #     workflow_file = '{cont_code}/workflows/single-omic/mg/Snakefile'
    # if mt and not mg:
    #     workflow_file = '{cont_code}/workflows/single-omic/mt/Snakefile'


    # if --enter flag is specified, change the command
    if args['--enter']:
        cmd += ['/bin/bash']
        cmd = ' '.join(cmd)
    else:
        # put default command if not specified
        if not args['COMMANDS']:
            args['COMMANDS'] = ['snakemake', 'ALL']
        # add the workflow file
        args['COMMANDS'] += ['-s', workflow_file]
        cmd += args['COMMANDS']
        cmd = ' '.join(cmd)
        #cmd = ' '.join(cmd) + map_user(' '.join(args['COMMANDS']), '{cont_out}')

    # before calling docker cmd, be sure that mounted directories exists
    # or they will be created by the container as root user
    if not database_path.exists():
        database_path.makedirs()
    if not config_directory.exists():
        config_directory.makedirs()

    # execute the command
    _call(cmd, out_container_name)


def validate(args):
    mg = args['-m']
    if mg and len(mg) < 2:
        print('Metagenomic data should be 2 paired files with or without single end', file=sys.stderr)
        return False
    mt = args['-t']
    if mt and len(mt) < 2:
        print('Metatranscriptomic data should be 2 paired files with or without single end', file=sys.stderr)
        return False
    if not mg and not mt:
        print('You should provide at metagenomic and/or metatranscriptomic data', file=sys.stderr)
        return False
    return True


def _call(cmd, container_name):
    print("Executing", '"', cmd, '"')
    try:
        p = subprocess.Popen(cmd, shell=True)
        p.wait()
    except KeyboardInterrupt:
        print('Killing container...')
        k = subprocess.Popen("docker kill %s" % container_name, shell=True)
        k.wait()
        print('Terminated')
        p.terminate()

if __name__ == '__main__':
    check_installation()
    args = docopt(__doc__, version=IMP_VERSION, options_first=True)
    check_imp_installed(args['-i'], args['-v'], args['-r'])

    if args['--init']:
        init(args)
        exit(0)

    if not validate(args):
        exit(1)

    run(args)
