#!/usr/bin/env python3
from lib.docopt import docopt
from lib.path import Path
import subprocess
import os
import json
import shlex
from copy import deepcopy
import tempfile

__doc__ = """Integrated Metaomic Pipeline.
 ____  __  __  ____
(_  _)(  \/  )(  _ \\
 _)(_  )    (  )___/
(____)(_/\/\_)(__)

Usage:
  IMP -m MG1 -m MG2 -t MT1 -t MT2 -o OUTPUT [--enter] [--norm] [-n CONTAINER] [-d DBPATH] [-e ENV] ... [COMMANDS ...]
  IMP --init [-d DBPATH]
  IMP (-h | --help)
  IMP --version

Options:
  -e ENV            Environment variable to pass to the container
  --enter           Enter the container
  --init            Initialize IMP databases (Take a while)
  --norm            Don't delete the container after use. Useful for debugging.
  -h --help         Show this help and exit
  -m MG             Path to the metagenomics paired files (must be 2 files).
  -t MT             Path to the metatranscriptomic paired files (2 files).
  -d DBPATH         Path to the databases [default: db]
  -n CONTAINER      Name of the container. Useful when you want to run a previous version of IMP.
  -o OUTPUT         Path to the output directory
"""


def get_version():
    return subprocess.check_output(
        ['git', '--no-pager', 'log', '-n', '1', '--pretty=format:%H']
    )


def dict_merge(a, b):
    """
    Deep merge 2 dicts together
    """
    if not isinstance(b, dict):
        return b
    result = deepcopy(a)
    for k, v in b.items():
        if k in result and isinstance(result[k], dict):
            result[k] = dict_merge(result[k], v)
        else:
            result[k] = deepcopy(v)
    return result


def yes_or_no(question):
    reply = str(input(question + ' (y/n): ')).lower().strip()
    if reply[0] == 'y':
        return True
    if reply[0] == 'n':
        return False
    else:
        return yes_or_no("Please enter ")


def init(args):
    CURRENT_PATH = Path(__file__).parent.abspath()
    # start docker container to index files and setup prokka
    container_name = args['-n'] is not None and args['-n'] or 'imp:latest'
    db_path = Path(args['-d']).abspath()
    cmd = [
        'docker', 'run', '--rm',
        '-v %s:/home/imp/integrated-metaomic-pipeline' % CURRENT_PATH,
        '-v %s:/databases' % db_path, container_name, 'snakemake -s /home/imp/integrated-metaomic-pipeline/init.rule'
    ]
    print("Executing", '"', ' '.join(cmd), '"')
    subprocess.call(cmd)


def run(args):
    CURRENT_PATH = Path(__file__).parent.abspath()
    # find common path
    mg_data = [Path(p).abspath() for p in args['-m']]
    mt_data = [Path(p).abspath() for p in args['-t']]
    # check paths
    for pth in mg_data + mt_data:
        if not pth.exists():
            print("'%s' does not exist" % pth)
            exit(1)
    common_path = Path(os.path.commonprefix(mg_data + mt_data)).dirname()
    # update data paths
    mg_data = [p.partition(common_path)[-1][1:] for p in mg_data]
    mt_data = [p.partition(common_path)[-1][1:] for p in mt_data]

    output = Path(args['-o']).abspath()
    if not output.exists():
        if yes_or_no("Output '%s' doesn't exist. Create ?" % output):
            output.makedirs()
        else:
            exit(0)
    container_name = args['-n'] is not None and args['-n'] or 'imp:latest'
    db_path = Path(args['-d']).abspath()
    # configure IMP mount point to the docker container
    mount_points = [
        '-v %s:/data' % common_path,
        '-v %s:/home/imp/integrated-metaomic-pipeline' % CURRENT_PATH,
        '-v %s:/output' % output,
        '-v %s:/databases' % db_path,
    ]

    # environement variables (add MG and MT data)
    envs = ['-e {}="{}"'.format(*e.split('=')) for e in args['-e']]

    # prepare MG and MT data
    mg = ['/data/' + d for d in mg_data]
    mt = ['/data/' + d for d in mt_data]

    # add to env
    envs += [
        '-e MG="%s"' % ' '.join(mg),
        '-e MT="%s"' % ' '.join(mt)
    ]

    # CL
    cmd = ['docker', 'run'] + mount_points + envs
    # rm the container by default
    if not args['--norm']:
        cmd += ['--rm']
    # if --enter flag is specified, add attach tty and set mode to interactive
    if args['--enter']:
        cmd += ['-it']
    # add container name and commands to pass to snakemake
    cmd += [container_name] + args['COMMANDS']
    # if --enter flag is specified, change the command
    if args['--enter']:
        cmd += ['/bin/bash']
    # parse CL correctly
    cmd = shlex.split(' '.join(cmd))
    print("Executing", '"', ' '.join(cmd), '"')
    subprocess.call(cmd)


if __name__ == '__main__':
    args = docopt(__doc__, version=get_version(), options_first=True)

    if args['--init']:
        init(args)
    else:
        run(args)
